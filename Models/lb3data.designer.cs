#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3634
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LB3.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class lb3dataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertYear(Year instance);
    partial void UpdateYear(Year instance);
    partial void DeleteYear(Year instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertHandicap(Handicap instance);
    partial void UpdateHandicap(Handicap instance);
    partial void DeleteHandicap(Handicap instance);
    partial void InsertHole(Hole instance);
    partial void UpdateHole(Hole instance);
    partial void DeleteHole(Hole instance);
    partial void InsertLeaderboard(Leaderboard instance);
    partial void UpdateLeaderboard(Leaderboard instance);
    partial void DeleteLeaderboard(Leaderboard instance);
    partial void InsertSI(SI instance);
    partial void UpdateSI(SI instance);
    partial void DeleteSI(SI instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertScore(Score instance);
    partial void UpdateScore(Score instance);
    partial void DeleteScore(Score instance);
    #endregion
		
		public lb3dataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public lb3dataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public lb3dataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public lb3dataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public lb3dataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Year> Years
		{
			get
			{
				return this.GetTable<Year>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Handicap> Handicaps
		{
			get
			{
				return this.GetTable<Handicap>();
			}
		}
		
		public System.Data.Linq.Table<Hole> Holes
		{
			get
			{
				return this.GetTable<Hole>();
			}
		}
		
		public System.Data.Linq.Table<Leaderboard> Leaderboards
		{
			get
			{
				return this.GetTable<Leaderboard>();
			}
		}
		
		public System.Data.Linq.Table<SI> SIs
		{
			get
			{
				return this.GetTable<SI>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<Score> Scores
		{
			get
			{
				return this.GetTable<Score>();
			}
		}
	}
	
	[Table(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CID;
		
		private string _CourseName;
		
		private System.Nullable<int> _OrderMerit;
		
		private System.Nullable<int> _Stableford_Total;
		
		private System.Nullable<int> _YID;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<Hole> _Holes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    partial void OnOrderMeritChanging(System.Nullable<int> value);
    partial void OnOrderMeritChanged();
    partial void OnStableford_TotalChanging(System.Nullable<int> value);
    partial void OnStableford_TotalChanged();
    partial void OnYIDChanging(System.Nullable<int> value);
    partial void OnYIDChanged();
    #endregion
		
		public Course()
		{
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._Holes = new EntitySet<Hole>(new Action<Hole>(this.attach_Holes), new Action<Hole>(this.detach_Holes));
			OnCreated();
		}
		
		[Column(Storage="_CID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[Column(Storage="_CourseName", DbType="VarChar(50)")]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[Column(Storage="_OrderMerit", DbType="Int")]
		public System.Nullable<int> OrderMerit
		{
			get
			{
				return this._OrderMerit;
			}
			set
			{
				if ((this._OrderMerit != value))
				{
					this.OnOrderMeritChanging(value);
					this.SendPropertyChanging();
					this._OrderMerit = value;
					this.SendPropertyChanged("OrderMerit");
					this.OnOrderMeritChanged();
				}
			}
		}
		
		[Column(Storage="_Stableford_Total", DbType="Int")]
		public System.Nullable<int> Stableford_Total
		{
			get
			{
				return this._Stableford_Total;
			}
			set
			{
				if ((this._Stableford_Total != value))
				{
					this.OnStableford_TotalChanging(value);
					this.SendPropertyChanging();
					this._Stableford_Total = value;
					this.SendPropertyChanged("Stableford_Total");
					this.OnStableford_TotalChanged();
				}
			}
		}
		
		[Column(Storage="_YID", DbType="Int")]
		public System.Nullable<int> YID
		{
			get
			{
				return this._YID;
			}
			set
			{
				if ((this._YID != value))
				{
					this.OnYIDChanging(value);
					this.SendPropertyChanging();
					this._YID = value;
					this.SendPropertyChanged("YID");
					this.OnYIDChanged();
				}
			}
		}
		
		[Association(Name="Course_Group", Storage="_Groups", ThisKey="CID", OtherKey="CourseID")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[Association(Name="Course_Hole", Storage="_Holes", ThisKey="CID", OtherKey="CourseID")]
		public EntitySet<Hole> Holes
		{
			get
			{
				return this._Holes;
			}
			set
			{
				this._Holes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Holes(Hole entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Holes(Hole entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[Table(Name="dbo.Event")]
	public partial class Event
	{
		
		private int _EID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<System.DateTime> _Timestamp;
		
		private string _Name;
		
		private string _Comment;
		
		public Event()
		{
		}
		
		[Column(Storage="_EID", DbType="Int NOT NULL")]
		public int EID
		{
			get
			{
				return this._EID;
			}
			set
			{
				if ((this._EID != value))
				{
					this._EID = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this._Timestamp = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Year")]
	public partial class Year : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _YID;
		
		private int _Year1;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<Handicap> _Handicaps;
		
		private EntitySet<Hole> _Holes;
		
		private EntitySet<Leaderboard> _Leaderboards;
		
		private EntitySet<SI> _SIs;
		
		private EntitySet<Score> _Scores;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYIDChanging(int value);
    partial void OnYIDChanged();
    partial void OnYear1Changing(int value);
    partial void OnYear1Changed();
    #endregion
		
		public Year()
		{
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._Handicaps = new EntitySet<Handicap>(new Action<Handicap>(this.attach_Handicaps), new Action<Handicap>(this.detach_Handicaps));
			this._Holes = new EntitySet<Hole>(new Action<Hole>(this.attach_Holes), new Action<Hole>(this.detach_Holes));
			this._Leaderboards = new EntitySet<Leaderboard>(new Action<Leaderboard>(this.attach_Leaderboards), new Action<Leaderboard>(this.detach_Leaderboards));
			this._SIs = new EntitySet<SI>(new Action<SI>(this.attach_SIs), new Action<SI>(this.detach_SIs));
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			OnCreated();
		}
		
		[Column(Storage="_YID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int YID
		{
			get
			{
				return this._YID;
			}
			set
			{
				if ((this._YID != value))
				{
					this.OnYIDChanging(value);
					this.SendPropertyChanging();
					this._YID = value;
					this.SendPropertyChanged("YID");
					this.OnYIDChanged();
				}
			}
		}
		
		[Column(Name="Year", Storage="_Year1", DbType="Int NOT NULL")]
		public int Year1
		{
			get
			{
				return this._Year1;
			}
			set
			{
				if ((this._Year1 != value))
				{
					this.OnYear1Changing(value);
					this.SendPropertyChanging();
					this._Year1 = value;
					this.SendPropertyChanged("Year1");
					this.OnYear1Changed();
				}
			}
		}
		
		[Association(Name="Year_Group", Storage="_Groups", ThisKey="YID", OtherKey="YearID")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[Association(Name="Year_Handicap", Storage="_Handicaps", ThisKey="YID", OtherKey="YearID")]
		public EntitySet<Handicap> Handicaps
		{
			get
			{
				return this._Handicaps;
			}
			set
			{
				this._Handicaps.Assign(value);
			}
		}
		
		[Association(Name="Year_Hole", Storage="_Holes", ThisKey="YID", OtherKey="YearID")]
		public EntitySet<Hole> Holes
		{
			get
			{
				return this._Holes;
			}
			set
			{
				this._Holes.Assign(value);
			}
		}
		
		[Association(Name="Year_Leaderboard", Storage="_Leaderboards", ThisKey="YID", OtherKey="YearID")]
		public EntitySet<Leaderboard> Leaderboards
		{
			get
			{
				return this._Leaderboards;
			}
			set
			{
				this._Leaderboards.Assign(value);
			}
		}
		
		[Association(Name="Year_SI", Storage="_SIs", ThisKey="YID", OtherKey="YearID")]
		public EntitySet<SI> SIs
		{
			get
			{
				return this._SIs;
			}
			set
			{
				this._SIs.Assign(value);
			}
		}
		
		[Association(Name="Year_Score", Storage="_Scores", ThisKey="YID", OtherKey="YearID")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
		
		private void attach_Handicaps(Handicap entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_Handicaps(Handicap entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
		
		private void attach_Holes(Hole entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_Holes(Hole entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
		
		private void attach_Leaderboards(Leaderboard entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_Leaderboards(Leaderboard entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
		
		private void attach_SIs(SI entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_SIs(SI entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
	}
	
	[Table(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GID;
		
		private string _GroupName;
		
		private int _YearID;
		
		private System.Nullable<int> _CourseID;
		
		private EntitySet<UserGroup> _UserGroups;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Year> _Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGIDChanging(int value);
    partial void OnGIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    partial void OnCourseIDChanging(System.Nullable<int> value);
    partial void OnCourseIDChanged();
    #endregion
		
		public Group()
		{
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			this._Course = default(EntityRef<Course>);
			this._Year = default(EntityRef<Year>);
			OnCreated();
		}
		
		[Column(Storage="_GID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GID
		{
			get
			{
				return this._GID;
			}
			set
			{
				if ((this._GID != value))
				{
					this.OnGIDChanging(value);
					this.SendPropertyChanging();
					this._GID = value;
					this.SendPropertyChanged("GID");
					this.OnGIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="VarChar(50)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[Column(Storage="_CourseID", DbType="Int")]
		public System.Nullable<int> CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[Association(Name="Group_UserGroup", Storage="_UserGroups", ThisKey="GID", OtherKey="GID")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		[Association(Name="Course_Group", Storage="_Course", ThisKey="CourseID", OtherKey="CID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._CourseID = value.CID;
					}
					else
					{
						this._CourseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[Association(Name="Year_Group", Storage="_Year", ThisKey="YearID", OtherKey="YID", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._YearID = value.YID;
					}
					else
					{
						this._YearID = default(int);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[Table(Name="dbo.Handicap")]
	public partial class Handicap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _Hval;
		
		private int _YearID;
		
		private EntityRef<Year> _Year;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHIDChanging(int value);
    partial void OnHIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnHvalChanging(System.Nullable<int> value);
    partial void OnHvalChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    #endregion
		
		public Handicap()
		{
			this._Year = default(EntityRef<Year>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_HID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HID
		{
			get
			{
				return this._HID;
			}
			set
			{
				if ((this._HID != value))
				{
					this.OnHIDChanging(value);
					this.SendPropertyChanging();
					this._HID = value;
					this.SendPropertyChanged("HID");
					this.OnHIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Hval", DbType="Int")]
		public System.Nullable<int> Hval
		{
			get
			{
				return this._Hval;
			}
			set
			{
				if ((this._Hval != value))
				{
					this.OnHvalChanging(value);
					this.SendPropertyChanging();
					this._Hval = value;
					this.SendPropertyChanged("Hval");
					this.OnHvalChanged();
				}
			}
		}
		
		[Column(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[Association(Name="Year_Handicap", Storage="_Year", ThisKey="YearID", OtherKey="YID", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.Handicaps.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.Handicaps.Add(this);
						this._YearID = value.YID;
					}
					else
					{
						this._YearID = default(int);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		[Association(Name="User_Handicap", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Handicaps.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Handicaps.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Hole")]
	public partial class Hole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HoleID;
		
		private System.Nullable<int> _HoleNum;
		
		private string _HoleName;
		
		private System.Nullable<int> _CourseID;
		
		private System.Nullable<int> _Par;
		
		private int _YearID;
		
		private System.Nullable<int> _Avg;
		
		private System.Nullable<int> _Best;
		
		private string _Notes;
		
		private System.Nullable<int> _L_drive;
		
		private System.Nullable<int> _N_pin;
		
		private System.Nullable<int> _SI;
		
		private EntitySet<SI> _SIs;
		
		private EntitySet<Score> _Scores;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Year> _Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHoleIDChanging(int value);
    partial void OnHoleIDChanged();
    partial void OnHoleNumChanging(System.Nullable<int> value);
    partial void OnHoleNumChanged();
    partial void OnHoleNameChanging(string value);
    partial void OnHoleNameChanged();
    partial void OnCourseIDChanging(System.Nullable<int> value);
    partial void OnCourseIDChanged();
    partial void OnParChanging(System.Nullable<int> value);
    partial void OnParChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    partial void OnAvgChanging(System.Nullable<int> value);
    partial void OnAvgChanged();
    partial void OnBestChanging(System.Nullable<int> value);
    partial void OnBestChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnL_driveChanging(System.Nullable<int> value);
    partial void OnL_driveChanged();
    partial void OnN_pinChanging(System.Nullable<int> value);
    partial void OnN_pinChanged();
    partial void OnSIChanging(System.Nullable<int> value);
    partial void OnSIChanged();
    #endregion
		
		public Hole()
		{
			this._SIs = new EntitySet<SI>(new Action<SI>(this.attach_SIs), new Action<SI>(this.detach_SIs));
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			this._Course = default(EntityRef<Course>);
			this._Year = default(EntityRef<Year>);
			OnCreated();
		}
		
		[Column(Storage="_HoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HoleID
		{
			get
			{
				return this._HoleID;
			}
			set
			{
				if ((this._HoleID != value))
				{
					this.OnHoleIDChanging(value);
					this.SendPropertyChanging();
					this._HoleID = value;
					this.SendPropertyChanged("HoleID");
					this.OnHoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_HoleNum", DbType="Int")]
		public System.Nullable<int> HoleNum
		{
			get
			{
				return this._HoleNum;
			}
			set
			{
				if ((this._HoleNum != value))
				{
					this.OnHoleNumChanging(value);
					this.SendPropertyChanging();
					this._HoleNum = value;
					this.SendPropertyChanged("HoleNum");
					this.OnHoleNumChanged();
				}
			}
		}
		
		[Column(Storage="_HoleName", DbType="VarChar(50)")]
		public string HoleName
		{
			get
			{
				return this._HoleName;
			}
			set
			{
				if ((this._HoleName != value))
				{
					this.OnHoleNameChanging(value);
					this.SendPropertyChanging();
					this._HoleName = value;
					this.SendPropertyChanged("HoleName");
					this.OnHoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_CourseID", DbType="Int")]
		public System.Nullable<int> CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[Column(Storage="_Par", DbType="Int")]
		public System.Nullable<int> Par
		{
			get
			{
				return this._Par;
			}
			set
			{
				if ((this._Par != value))
				{
					this.OnParChanging(value);
					this.SendPropertyChanging();
					this._Par = value;
					this.SendPropertyChanged("Par");
					this.OnParChanged();
				}
			}
		}
		
		[Column(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[Column(Storage="_Avg", DbType="Int")]
		public System.Nullable<int> Avg
		{
			get
			{
				return this._Avg;
			}
			set
			{
				if ((this._Avg != value))
				{
					this.OnAvgChanging(value);
					this.SendPropertyChanging();
					this._Avg = value;
					this.SendPropertyChanged("Avg");
					this.OnAvgChanged();
				}
			}
		}
		
		[Column(Storage="_Best", DbType="Int")]
		public System.Nullable<int> Best
		{
			get
			{
				return this._Best;
			}
			set
			{
				if ((this._Best != value))
				{
					this.OnBestChanging(value);
					this.SendPropertyChanging();
					this._Best = value;
					this.SendPropertyChanged("Best");
					this.OnBestChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_L_drive", DbType="Int")]
		public System.Nullable<int> L_drive
		{
			get
			{
				return this._L_drive;
			}
			set
			{
				if ((this._L_drive != value))
				{
					this.OnL_driveChanging(value);
					this.SendPropertyChanging();
					this._L_drive = value;
					this.SendPropertyChanged("L_drive");
					this.OnL_driveChanged();
				}
			}
		}
		
		[Column(Storage="_N_pin", DbType="Int")]
		public System.Nullable<int> N_pin
		{
			get
			{
				return this._N_pin;
			}
			set
			{
				if ((this._N_pin != value))
				{
					this.OnN_pinChanging(value);
					this.SendPropertyChanging();
					this._N_pin = value;
					this.SendPropertyChanged("N_pin");
					this.OnN_pinChanged();
				}
			}
		}
		
		[Column(Storage="_SI", DbType="Int")]
		public System.Nullable<int> SI
		{
			get
			{
				return this._SI;
			}
			set
			{
				if ((this._SI != value))
				{
					this.OnSIChanging(value);
					this.SendPropertyChanging();
					this._SI = value;
					this.SendPropertyChanged("SI");
					this.OnSIChanged();
				}
			}
		}
		
		[Association(Name="Hole_SI", Storage="_SIs", ThisKey="HoleID", OtherKey="HoleID")]
		public EntitySet<SI> SIs
		{
			get
			{
				return this._SIs;
			}
			set
			{
				this._SIs.Assign(value);
			}
		}
		
		[Association(Name="Hole_Score", Storage="_Scores", ThisKey="HoleID", OtherKey="HoleID")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[Association(Name="Course_Hole", Storage="_Course", ThisKey="CourseID", OtherKey="CID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Holes.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Holes.Add(this);
						this._CourseID = value.CID;
					}
					else
					{
						this._CourseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[Association(Name="Year_Hole", Storage="_Year", ThisKey="YearID", OtherKey="YID", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.Holes.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.Holes.Add(this);
						this._YearID = value.YID;
					}
					else
					{
						this._YearID = default(int);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SIs(SI entity)
		{
			this.SendPropertyChanging();
			entity.Hole = this;
		}
		
		private void detach_SIs(SI entity)
		{
			this.SendPropertyChanging();
			entity.Hole = null;
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Hole = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Hole = null;
		}
	}
	
	[Table(Name="dbo.Leaderboard")]
	public partial class Leaderboard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LID;
		
		private int _UserID;
		
		private int _Points;
		
		private int _YearID;
		
		private EntityRef<Year> _Year;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLIDChanging(int value);
    partial void OnLIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    #endregion
		
		public Leaderboard()
		{
			this._Year = default(EntityRef<Year>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_LID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LID
		{
			get
			{
				return this._LID;
			}
			set
			{
				if ((this._LID != value))
				{
					this.OnLIDChanging(value);
					this.SendPropertyChanging();
					this._LID = value;
					this.SendPropertyChanged("LID");
					this.OnLIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Column(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[Association(Name="Year_Leaderboard", Storage="_Year", ThisKey="YearID", OtherKey="YID", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.Leaderboards.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.Leaderboards.Add(this);
						this._YearID = value.YID;
					}
					else
					{
						this._YearID = default(int);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		[Association(Name="User_Leaderboard", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Leaderboards.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Leaderboards.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SI")]
	public partial class SI : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SID;
		
		private System.Nullable<int> _SIndx;
		
		private System.Nullable<int> _HoleID;
		
		private int _YearID;
		
		private EntityRef<Hole> _Hole;
		
		private EntityRef<Year> _Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSIDChanging(int value);
    partial void OnSIDChanged();
    partial void OnSIndxChanging(System.Nullable<int> value);
    partial void OnSIndxChanged();
    partial void OnHoleIDChanging(System.Nullable<int> value);
    partial void OnHoleIDChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    #endregion
		
		public SI()
		{
			this._Hole = default(EntityRef<Hole>);
			this._Year = default(EntityRef<Year>);
			OnCreated();
		}
		
		[Column(Storage="_SID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[Column(Storage="_SIndx", DbType="Int")]
		public System.Nullable<int> SIndx
		{
			get
			{
				return this._SIndx;
			}
			set
			{
				if ((this._SIndx != value))
				{
					this.OnSIndxChanging(value);
					this.SendPropertyChanging();
					this._SIndx = value;
					this.SendPropertyChanged("SIndx");
					this.OnSIndxChanged();
				}
			}
		}
		
		[Column(Storage="_HoleID", DbType="Int")]
		public System.Nullable<int> HoleID
		{
			get
			{
				return this._HoleID;
			}
			set
			{
				if ((this._HoleID != value))
				{
					if (this._Hole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHoleIDChanging(value);
					this.SendPropertyChanging();
					this._HoleID = value;
					this.SendPropertyChanged("HoleID");
					this.OnHoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[Association(Name="Hole_SI", Storage="_Hole", ThisKey="HoleID", OtherKey="HoleID", IsForeignKey=true)]
		public Hole Hole
		{
			get
			{
				return this._Hole.Entity;
			}
			set
			{
				Hole previousValue = this._Hole.Entity;
				if (((previousValue != value) 
							|| (this._Hole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hole.Entity = null;
						previousValue.SIs.Remove(this);
					}
					this._Hole.Entity = value;
					if ((value != null))
					{
						value.SIs.Add(this);
						this._HoleID = value.HoleID;
					}
					else
					{
						this._HoleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Hole");
				}
			}
		}
		
		[Association(Name="Year_SI", Storage="_Year", ThisKey="YearID", OtherKey="YID", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.SIs.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.SIs.Add(this);
						this._YearID = value.YID;
					}
					else
					{
						this._YearID = default(int);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Name;
		
		private string _Nickname;
		
		private int _Rating;
		
		private EntitySet<Handicap> _Handicaps;
		
		private EntitySet<Leaderboard> _Leaderboards;
		
		private EntitySet<UserGroup> _UserGroups;
		
		private EntitySet<Score> _Scores;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    #endregion
		
		public User()
		{
			this._Handicaps = new EntitySet<Handicap>(new Action<Handicap>(this.attach_Handicaps), new Action<Handicap>(this.detach_Handicaps));
			this._Leaderboards = new EntitySet<Leaderboard>(new Action<Leaderboard>(this.attach_Leaderboards), new Action<Leaderboard>(this.detach_Leaderboards));
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Nickname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Association(Name="User_Handicap", Storage="_Handicaps", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Handicap> Handicaps
		{
			get
			{
				return this._Handicaps;
			}
			set
			{
				this._Handicaps.Assign(value);
			}
		}
		
		[Association(Name="User_Leaderboard", Storage="_Leaderboards", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Leaderboard> Leaderboards
		{
			get
			{
				return this._Leaderboards;
			}
			set
			{
				this._Leaderboards.Assign(value);
			}
		}
		
		[Association(Name="User_UserGroup", Storage="_UserGroups", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		[Association(Name="User_Score", Storage="_Scores", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Handicaps(Handicap entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Handicaps(Handicap entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Leaderboards(Leaderboard entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Leaderboards(Leaderboard entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UGID;
		
		private int _UserID;
		
		private int _GID;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUGIDChanging(int value);
    partial void OnUGIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGIDChanging(int value);
    partial void OnGIDChanged();
    #endregion
		
		public UserGroup()
		{
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UGID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UGID
		{
			get
			{
				return this._UGID;
			}
			set
			{
				if ((this._UGID != value))
				{
					this.OnUGIDChanging(value);
					this.SendPropertyChanging();
					this._UGID = value;
					this.SendPropertyChanged("UGID");
					this.OnUGIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_GID", DbType="Int NOT NULL")]
		public int GID
		{
			get
			{
				return this._GID;
			}
			set
			{
				if ((this._GID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGIDChanging(value);
					this.SendPropertyChanging();
					this._GID = value;
					this.SendPropertyChanged("GID");
					this.OnGIDChanged();
				}
			}
		}
		
		[Association(Name="Group_UserGroup", Storage="_Group", ThisKey="GID", OtherKey="GID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._GID = value.GID;
					}
					else
					{
						this._GID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="User_UserGroup", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Score")]
	public partial class Score : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScID;
		
		private System.Nullable<int> _HoleID;
		
		private System.Nullable<int> _Score1;
		
		private System.Nullable<int> _UserID;
		
		private int _YearID;
		
		private System.Nullable<int> _Stableford;
		
		private System.Nullable<int> _PinUserID;
		
		private System.Nullable<int> _DriveUserID;
		
		private EntityRef<Hole> _Hole;
		
		private EntityRef<User> _User;
		
		private EntityRef<Year> _Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScIDChanging(int value);
    partial void OnScIDChanged();
    partial void OnHoleIDChanging(System.Nullable<int> value);
    partial void OnHoleIDChanged();
    partial void OnScore1Changing(System.Nullable<int> value);
    partial void OnScore1Changed();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    partial void OnStablefordChanging(System.Nullable<int> value);
    partial void OnStablefordChanged();
    partial void OnPinUserIDChanging(System.Nullable<int> value);
    partial void OnPinUserIDChanged();
    partial void OnDriveUserIDChanging(System.Nullable<int> value);
    partial void OnDriveUserIDChanged();
    #endregion
		
		public Score()
		{
			this._Hole = default(EntityRef<Hole>);
			this._User = default(EntityRef<User>);
			this._Year = default(EntityRef<Year>);
			OnCreated();
		}
		
		[Column(Storage="_ScID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScID
		{
			get
			{
				return this._ScID;
			}
			set
			{
				if ((this._ScID != value))
				{
					this.OnScIDChanging(value);
					this.SendPropertyChanging();
					this._ScID = value;
					this.SendPropertyChanged("ScID");
					this.OnScIDChanged();
				}
			}
		}
		
		[Column(Storage="_HoleID", DbType="Int")]
		public System.Nullable<int> HoleID
		{
			get
			{
				return this._HoleID;
			}
			set
			{
				if ((this._HoleID != value))
				{
					if (this._Hole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHoleIDChanging(value);
					this.SendPropertyChanging();
					this._HoleID = value;
					this.SendPropertyChanged("HoleID");
					this.OnHoleIDChanged();
				}
			}
		}
		
		[Column(Name="Score", Storage="_Score1", DbType="Int")]
		public System.Nullable<int> Score1
		{
			get
			{
				return this._Score1;
			}
			set
			{
				if ((this._Score1 != value))
				{
					this.OnScore1Changing(value);
					this.SendPropertyChanging();
					this._Score1 = value;
					this.SendPropertyChanged("Score1");
					this.OnScore1Changed();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[Column(Storage="_Stableford", DbType="Int")]
		public System.Nullable<int> Stableford
		{
			get
			{
				return this._Stableford;
			}
			set
			{
				if ((this._Stableford != value))
				{
					this.OnStablefordChanging(value);
					this.SendPropertyChanging();
					this._Stableford = value;
					this.SendPropertyChanged("Stableford");
					this.OnStablefordChanged();
				}
			}
		}
		
		[Column(Storage="_PinUserID", DbType="Int")]
		public System.Nullable<int> PinUserID
		{
			get
			{
				return this._PinUserID;
			}
			set
			{
				if ((this._PinUserID != value))
				{
					this.OnPinUserIDChanging(value);
					this.SendPropertyChanging();
					this._PinUserID = value;
					this.SendPropertyChanged("PinUserID");
					this.OnPinUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_DriveUserID", DbType="Int")]
		public System.Nullable<int> DriveUserID
		{
			get
			{
				return this._DriveUserID;
			}
			set
			{
				if ((this._DriveUserID != value))
				{
					this.OnDriveUserIDChanging(value);
					this.SendPropertyChanging();
					this._DriveUserID = value;
					this.SendPropertyChanged("DriveUserID");
					this.OnDriveUserIDChanged();
				}
			}
		}
		
		[Association(Name="Hole_Score", Storage="_Hole", ThisKey="HoleID", OtherKey="HoleID", IsForeignKey=true)]
		public Hole Hole
		{
			get
			{
				return this._Hole.Entity;
			}
			set
			{
				Hole previousValue = this._Hole.Entity;
				if (((previousValue != value) 
							|| (this._Hole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hole.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Hole.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._HoleID = value.HoleID;
					}
					else
					{
						this._HoleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Hole");
				}
			}
		}
		
		[Association(Name="User_Score", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Year_Score", Storage="_Year", ThisKey="YearID", OtherKey="YID", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._YearID = value.YID;
					}
					else
					{
						this._YearID = default(int);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
